// <auto-generated />
using System;
using BeachSpot.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BeachSpot.Persistence.Migrations
{
    [DbContext(typeof(BeachSpotDBContext))]
    partial class BeachSpotDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BeachSpot.Domain.Entities.Beach", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("Beaches", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("f8aeab83-385d-4462-988f-d232bbf5727d"),
                            Description = "Copacabana (Portuguese pronunciation: [kɔpakaˈbɐ̃nɐ]) is a bairro (neighbourhood) located in the South Zone of the city of Rio de Janeiro, Brazil. It is most prominently known for its 4 km (2.5 miles) balneario beach, which is one of the most famous in the world.",
                            ImageUrl = "https://upload.wikimedia.org/wikipedia/commons/6/62/Praia_de_Copacabana_-_Rio_de_Janeiro%2C_Brasil.jpg",
                            Name = "Copacabana"
                        },
                        new
                        {
                            Id = new Guid("b76d2f50-81b3-479a-949e-b17d9a2d557d"),
                            Description = "Venice is a neighborhood of the city of Los Angeles within the Westside region of Los Angeles County, California.",
                            ImageUrl = "https://en.wikipedia.org/wiki/File:Beach_bikepath_in_the_Venice_Beach_park,_California.jpg",
                            Name = "Venice"
                        },
                        new
                        {
                            Id = new Guid("111e20b0-aac8-4a00-a578-234526349ac0"),
                            Description = "The Zlatni Rat, often referred to as the Golden Cape or Golden Horn (translated from the local Chakavian dialect), is a spit of land located about 2 kilometres (1 mile) west from the harbour town of Bol on the southern coast of the Croatian island of Brač, in the region of Dalmatia.",
                            ImageUrl = "https://upload.wikimedia.org/wikipedia/commons/thumb/1/1c/Golden_Cape.jpg/260px-Golden_Cape.jpg",
                            Name = "Zlatni Rat"
                        });
                });

            modelBuilder.Entity("BeachSpot.Domain.Entities.Like", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("SightingId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SightingId");

                    b.HasIndex("UserId");

                    b.ToTable("Likes", (string)null);
                });

            modelBuilder.Entity("BeachSpot.Domain.Entities.Sighting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BeachId")
                        .HasColumnType("uuid");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Latitude")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("Longitude")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("Quote")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("BeachId");

                    b.HasIndex("UserId");

                    b.ToTable("Sightings", (string)null);
                });

            modelBuilder.Entity("BeachSpot.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("BeachSpot.Domain.Entities.Like", b =>
                {
                    b.HasOne("BeachSpot.Domain.Entities.Sighting", "Sighting")
                        .WithMany("Likes")
                        .HasForeignKey("SightingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeachSpot.Domain.Entities.User", "User")
                        .WithMany("Likes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sighting");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BeachSpot.Domain.Entities.Sighting", b =>
                {
                    b.HasOne("BeachSpot.Domain.Entities.Beach", "Beach")
                        .WithMany("Sightings")
                        .HasForeignKey("BeachId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeachSpot.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Beach");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BeachSpot.Domain.Entities.Beach", b =>
                {
                    b.Navigation("Sightings");
                });

            modelBuilder.Entity("BeachSpot.Domain.Entities.Sighting", b =>
                {
                    b.Navigation("Likes");
                });

            modelBuilder.Entity("BeachSpot.Domain.Entities.User", b =>
                {
                    b.Navigation("Likes");
                });
#pragma warning restore 612, 618
        }
    }
}
